# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_utils.ipynb.

# %% auto 0
__all__ = ['DependencyParser']

# %% ../nbs/00_utils.ipynb 5
import toml


class DependencyParser:
    def __init__(self, path_to_pipfile: str):
        with open(path_to_pipfile) as f:
            self.pipfile = toml.load(f)

    @staticmethod
    def pipenv_to_setuptools(package_name: str, contraints: str | dict) -> str:
        if contraints == "*":
            res = f"{package_name}"
        elif (contraints != "*") and isinstance(contraints, str):
            res = f"{package_name} {contraints}"
        elif isinstance(contraints, dict):
            if extras := contraints.get("extras"):
                extras = [f"'{e}'" for e in extras]  # add ' to extras in list
                package_name = f"{package_name}[{','.join(extras)}]"
                res = f"{package_name} {contraints['version']}"
            else:
                res = f"{package_name} {contraints['version']}"
        else:
            raise ValueError(f"Could not parse {package_name}, {contraints}")

        return res

    @property
    def min_python(self) -> str:
        return self.pipfile["requires"]["python_version"]

    @property
    def requirements(self):
        return [
            self.pipenv_to_setuptools(k, v) for k, v in self.pipfile["packages"].items()
        ]

    @property
    def dev_requirements(self):
        return [
            self.pipenv_to_setuptools(k, v)
            for k, v in self.pipfile["dev-packages"].items()
        ]
